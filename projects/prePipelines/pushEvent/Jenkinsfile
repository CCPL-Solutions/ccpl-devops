@Library('ccpl-pipelinesjenkins-library') _

import com.solutions.ccpl.utils.Git
import com.solutions.ccpl.utils.Util
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject

def git  = new Git()
def util = new Util()

def branchName
def projectName
def msVersion
def multiBranchJobName

pipeline {
    agent any

    stages {
        stage('Initialization') {
            steps {
                script {
                    buildName "${params.REPO_NAME}"
                    branchName = util.getBrachName(params.REPO_BRANCH)

                    releaseConfigurationContent = util.getReleaseConfigurationContent(params.REPO_NAME, branchName)
                    projectName = releaseConfigurationContent.projectName
                    msVersion = releaseConfigurationContent.version
                }
            }
        }
        stage('Configure Workspace') {
            steps {
                script {

                    git.cloneRepository('ccpl-devops', 'master')
                    sh 'cp projects/dsl/multibranchPipelineSeedJob.dsl .'

                    multiBranchJobName = "/CCPLSolutions/${projectName}/${params.CATEGORY}/${params.REPO_NAME}"
                    def multiBranchJob = Jenkins.instance.getItemByFullName(multiBranchJobName)

                    if (multiBranchJob != null && multiBranchJob instanceof WorkflowMultiBranchProject) {

                        println 'El Multibranch Pipeline ya existe. Iniciando escaneo de ramas...'
                        multiBranchJob.scheduleBuild()

                    } else {

                        println "Creando Multibranch Pipeline... ${multiBranchJobName}"
                        jobDsl targets: 'multibranchPipelineSeedJob.dsl',
                                additionalParameters: [
                                    PROJECT_NAME: "${projectName}", 
                                    REPO_NAME: "${params.REPO_NAME}",
                                    CATEGORY: "${params.CATEGORY}"]
                    }

                }
            }
        }
        stage('Execute MultiBranch Pipeline') {
            steps {
                script {
                    sleep(time: 10, unit: 'SECONDS')

                    build job: "${multiBranchJobName}/${branchName}",
                                wait: false, 
                                parameters:[
                                    string(name: 'variables', value: "type:Micropipeline;msVersion:${msVersion}")
                                ]
                }
            }
        }
    }
}
