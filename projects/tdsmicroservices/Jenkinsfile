def repoWorkspace

pipeline {
  agent any
  tools {
    maven "maven-jenkins"
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          repoWorkspace = "${WORKSPACE}/${params.REPO_NAME}"
          dir(repoWorkspace) {
            git branch: "${params.REPO_BRANCH}", credentialsId: 'local-jenkins', url: "https://github.com/pedro-chavezcastro/${params.REPO_NAME}.git"
          }
        }
      }
    }
    stage('Build') {
      steps {
        dir("${repoWorkspace}") {
          sh 'mvn clean package'
        }
      }
    }
    stage('Test') {
      steps {
        dir("${repoWorkspace}") {
          sh 'mvn test'
        }
      }
    }
    stage("Scan & Quality Gate") {
      steps {
        dir("${repoWorkspace}") {
          withSonarQubeEnv(installationName: "SonarQubeServer") {
            sh "mvn sonar:sonar"
          }
          timeout(time: 2, unit: "MINUTES") {
            waitForQualityGate abortPipeline: true
          }
        }
      }
    }
    stage('Docker Build & Push') {
      steps {
        dir("${repoWorkspace}") {
          script {
            sh "git rev-parse --short HEAD > .git/commit-id"
            gitcommit = readFile(".git/commit-id").trim()

            git branch: "main", credentialsId: 'local-jenkins', url: "https://github.com/pedro-chavezcastro/ccpl-devops.git"

            def app = docker.build("plchavez98/${params.REPO_NAME}", "./ccpl-devops/projects/tdsmicroservices/Dockerfile")

            docker.withRegistry("https://registry.hub.docker.com", "DockerHubCredentials") {
              app.push("${gitcommit}")
              app.push("latest")
            }

          }
        }

      }
    }
  }
  post {
    success {
      slackSend message: "Build successfully - ${env.REPO_NAME} # ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
    failure {
      slackSend message: "Build failed - ${env.REPO_NAME} # ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
  }
}