def repoWorkspace

pipeline {
  agent any
  tools {
    maven "maven-jenkins"
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          repoWorkspace = "${WORKSPACE}/${params.REPO_NAME}"
          dir(repoWorkspace) {
            checkout scmGit(branches: [[name: "${params.REPO_BRANCH}"]], extensions: [], userRemoteConfigs: [[credentialsId: '5a737657-1516-4d9b-808a-8e3efdfb0ccc', url: "git@github.com:CCPL-Solutions/${params.REPO_NAME}.git"]])
          }
        }
      }
    }
    stage('Build') {
      steps {
        dir("${repoWorkspace}") {
          configFileProvider([configFile(fileId: 'mvn-settings-artifactory', variable: 'MAVEN_SETTINGS_XML')]) {
            sh 'mvn clean package'
          }
        }
      }
    }
    stage('Test') {
      steps {
        dir("${repoWorkspace}") {
          sh 'mvn test'
        }
      }
    }
    stage("Scan & Quality Gate") {
      steps {
        dir("${repoWorkspace}") {
          withSonarQubeEnv(installationName: "SonarQubeServer") {
            sh "mvn sonar:sonar"
          }
          timeout(time: 2, unit: "MINUTES") {
            waitForQualityGate abortPipeline: true
          }
        }
      }
    }
    stage('Publish to Artifactory') {
      steps {
        dir("${repoWorkspace}") {
          script {
            def server = Artifactory.server 'ccplsolutions.loca.jfrog'
            def rtMaven = Artifactory.newMavenBuild()

            rtMaven.tool = 'maven-jenkins'
            rtMaven.deployer releaseRepo: 'ccpl-libs-release-local', snapshotRepo: 'ccpl-libs-snapshot-local', server: server
            rtMaven.resolver releaseRepo: 'ccpl-libs-release', snapshotRepo: 'ccpl-libs-snapshot', server: server

            def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install'

            server.publishBuildInfo buildInfo
          }
        }
      }
    }

  }
  post {
    success {
      slackSend message: "Build successfully - ${env.REPO_NAME} # ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
    failure {
      slackSend message: "Build failed - ${env.REPO_NAME} # ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
  }
}